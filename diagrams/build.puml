@startuml
namespace dao {
    class ActivityDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Activity, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, activity *dto.Activity) (*dto.Activity, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int64, []*dto.Activity, error)

    }
    class AuthDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + InitIndex(ctx context.Context) error
        + Create(ctx context.Context, auth *dto.AuthObject) (*dto.AuthObject, error)
        + Get(ctx context.Context, token string) (*dto.AuthObject, error)
        + Delete(ctx context.Context, token string) error
        + DeleteByID(ctx context.Context, id string) error

    }
    class CallingReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, callingReport *dto.CallingReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.CallingReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.CallingReport, error)

    }
    class DeclarationDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Declaration, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Declaration, error)
        + Update(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Delete(ctx context.Context, id string) error
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByTime(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByCallingStatusAndTime(ctx context.Context, callingStatus []int64, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Declaration, error)
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + QueryStableDeclarations(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)

    }
    class DeclarationReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, declarationReport *dto.DeclarationReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.DeclarationReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.DeclarationReport, error)

    }
    interface IActivityDAO  {
        + Create(ctx context.Context, activity *dto.Activity) (*dto.Activity, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int64, []*dto.Activity, error)

    }
    interface IAuthDAO  {
        + InitIndex(ctx context.Context) error
        + Create(ctx context.Context, auth *dto.AuthObject) (*dto.AuthObject, error)
        + Get(ctx context.Context, token string) (*dto.AuthObject, error)
        + Delete(ctx context.Context, token string) error
        + DeleteByID(ctx context.Context, id string) error

    }
    interface ICallingReport  {
        + Create(ctx context.Context, date string, callingReport *dto.CallingReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.CallingReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.CallingReport, error)

    }
    interface IDeclarationDAO  {
        + Create(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Get(ctx context.Context, declarationID string, patientType int64) (*dto.Declaration, error)
        + Update(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Delete(ctx context.Context, declarationID string) error
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByTime(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByCallingStatusAndTime(ctx context.Context, callingStatus []int64, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Declaration, error)
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + QueryStableDeclarations(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)

    }
    interface IDeclarationReport  {
        + Create(ctx context.Context, date string, declarationReport *dto.DeclarationReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.DeclarationReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.DeclarationReport, error)

    }
    interface IPatientDAO  {
        + Create(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Patient, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Patient, error)
        + GetByStatus(ctx context.Context, status []int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetSwabPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetDeclaredByTime(ctx context.Context, from int64, patientType int64) ([]*dto.Patient, error)
        + GetUndeclaredByTime(ctx context.Context, from int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + Update(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + ClientGetUndeclaredByTime(ctx context.Context, from int64) ([]*dto.Patient, error)
        + GetByConsentTime(ctx context.Context, from int64, to int64) ([]*dto.Patient, error)

    }
    interface IPatientStatusReport  {
        + Create(ctx context.Context, date string, patientStatusReport *dto.PatientStatusReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.PatientStatusReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.PatientStatusReport, error)

    }
    interface ISwabDAO  {
        + Create(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Update(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Swab, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Swab, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)

    }
    interface IUserDAO  {
        + Create(ctx context.Context, user *dto.User) (*dto.User, error)
        + Update(ctx context.Context, user *dto.User) (*dto.User, error)
        + Get(ctx context.Context, id string) (*dto.User, error)
        + BatchGet(ctx context.Context, ids []string) ([]*dto.User, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter *dto.FilterData) (int64, []*dto.User, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)

    }
    class PatientDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Patient, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Patient, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Patient, error)
        + GetByStatus(ctx context.Context, status []int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetSwabPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetDeclaredByTime(ctx context.Context, from int64, patientType int64) ([]*dto.Patient, error)
        + GetUndeclaredByTime(ctx context.Context, from int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetByConsentTime(ctx context.Context, from int64, to int64) ([]*dto.Patient, error)
        + Update(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + ClientGetUndeclaredByTime(ctx context.Context, from int64) ([]*dto.Patient, error)

    }
    class PatientStatusReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, patientStatusReport *dto.PatientStatusReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.PatientStatusReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.PatientStatusReport, error)

    }
    class SwabDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Swab, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Swab, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Swab, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + Update(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)

    }
    class UserDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, user *dto.User) (*dto.User, error)
        + Get(ctx context.Context, id string) (*dto.User, error)
        + BatchGet(ctx context.Context, ids []string) ([]*dto.User, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter *dto.FilterData) (int64, []*dto.User, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + Update(ctx context.Context, user *dto.User) (*dto.User, error)

    }
}

namespace dto {
    class Activity << (S,Aquamarine) >> {
        + ID string
        + UserID string
        + UserName string
        + OldPatient *Patient
        + NewPatient *Patient
        + OldSwab *Swab
        + NewSwab *Swab
        + Time int64
        + TTL time.Time

    }
    class AuthObject << (S,Aquamarine) >> {
        + Token string
        + UserId string
        + DisplayName string
        + TTL time.Time
        + Type string

    }
    class CallingReport << (S,Aquamarine) >> {
        + Date string
        + DontHaveToCall int64
        + PatientCalled int64
        + UMMCCalled int64
        + NoYetCall int64
        + PuiDontHaveToCall int64
        + PuiPatientCalled int64
        + PuiUMMCCalled int64
        + PuiNoYetCall int64
        + ContactDontHaveToCall int64
        + ContactPatientCalled int64
        + ContactUMMCCalled int64
        + ContactNoYetCall int64

    }
    class Declaration << (S,Aquamarine) >> {
        + ID string
        + PatientID string
        + PatientName string
        + PatientType int64
        + Cough int64
        + Throat int64
        + Fever int64
        + Breathe int64
        + Chest int64
        + Blue int64
        + Drowsy int64
        + HasSymptom bool
        + SubmittedAt int64
        + CallingStatus int64
        + Date string
        + PatientPhoneNumber string
        + DoctorRemarks string
        + Loss int64

    }
    class DeclarationReport << (S,Aquamarine) >> {
        + Date string
        + UndeclaredCount int64
        + DeclaredCount int64
        + PuiUndeclaredCount int64
        + PuiDeclaredCount int64
        + ContactUndeclaredCount int64
        + ContactDeclaredCount int64

    }
    class Patient << (S,Aquamarine) >> {
        + ID string
        + Name string
        + TelegramID string
        + PhoneNumber string
        + Email string
        + Status int64
        + LastDeclared int64
        + SwabCount int64
        + Episode int64
        + Type int64
        + TypeChangeDate string
        + LastDeclareResult bool
        + ExposureDate string
        + ExposureSource string
        + DaysSinceExposure int64
        + RegistrationNum string
        + AlternateContact string
        + IsolationAddress string
        + SymptomDate string
        + SwabDate string
        + FeverContDay int64
        + Remarks string
        + Localization int64
        + Consent int64
        + PrivacyPolicy int64
        + CallingStatus int64
        + FeverStartDate string
        + DaysSinceSwab int64
        + HomeAddress string
        + IsSameAddress bool

    }
    class PatientStatusReport << (S,Aquamarine) >> {
        + Date string
        + Symptomatic int64
        + Asymptomatic int64
        + ConfirmedButNotAdmitted int64
        + ConfirmedAndAdmitted int64
        + Completed int64
        + Quit int64
        + Recovered int64
        + PassedAway int64
        + PuiSymptomatic int64
        + PuiAsymptomatic int64
        + PuiConfirmedButNotAdmitted int64
        + PuiConfirmedAndAdmitted int64
        + PuiCompleted int64
        + PuiQuit int64
        + PuiRecovered int64
        + PuiPassedAway int64
        + ContactSymptomatic int64
        + ContactAsymptomatic int64
        + ContactConfirmedButNotAdmitted int64
        + ContactConfirmedAndAdmitted int64
        + ContactCompleted int64
        + ContactQuit int64
        + ContactRecovered int64
        + ContactPassedAway int64

    }
    class Swab << (S,Aquamarine) >> {
        + ID string
        + PatientID string
        + PatientName string
        + PatientPhoneNumber string
        + PatientType int64
        + Status int64
        + Date string
        + Location string
        + IsOtherSwabLocation bool

    }
    class User << (S,Aquamarine) >> {
        + ID string
        + Role string
        + DisplayName string
        + PhoneNumber string
        + Email string
        + Password string
        + Disabled bool
        + AccessToken string
        + RefreshToken string
        + ResetToken string
        + AccessUuid string
        + RefreshUuid string
        + AtExpires int64
        + RtExpires int64
        + ResetExpires int64

    }
}

namespace handlers {
    class Handlers << (S,Aquamarine) >> {
        + Model model.IModel

        - validateUser(ctx context.Context, roles []string) (*dto.User, error)
    }
    interface IHandlers  {
        + CreatePatient(ctx context.Context, req *api.CreatePatientRequest) (*api.CreatePatientResponse, error)
        + GetPatient(ctx context.Context, req *api.GetPatientRequest) (*api.GetPatientResponse, error)
        + GetPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetUndeclaredPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetNoCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetSwabPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetOtherPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetStablePatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + UpdatePatient(ctx context.Context, req *api.UpdatePatientRequest) (*api.UpdatePatientResponse, error)
        + UpdatePatients(ctx context.Context, req *api.UpdatePatientsRequest) (*api.UpdatePatientsResponse, error)
        + DeletePatient(ctx context.Context, req *api.DeletePatientRequest) (*api.DeletePatientResponse, error)
        + DeletePatients(ctx context.Context, req *api.DeletePatientsRequest) (*api.DeletePatientsResponse, error)
        + CreateUser(ctx context.Context, req *api.CreateUserRequest) (*api.CreateUserResponse, error)
        + GetUser(ctx context.Context, req *api.GetUserRequest) (*api.GetUserResponse, error)
        + GetUsers(ctx context.Context, req *api.GetUsersRequest) (*api.GetUsersResponse, error)
        + UpdateUser(ctx context.Context, req *api.UpdateUserRequest) (*api.UpdateUserResponse, error)
        + UpdateUsers(ctx context.Context, req *api.UpdateUsersRequest) (*api.UpdateUsersResponse, error)
        + DeleteUser(ctx context.Context, req *api.DeleteUserRequest) (*api.DeleteUserResponse, error)
        + DeleteUsers(ctx context.Context, req *api.DeleteUsersRequest) (*api.DeleteUsersResponse, error)
        + CreateSwab(ctx context.Context, req *api.CreateSwabRequest) (*api.CreateSwabResponse, error)
        + GetSwab(ctx context.Context, req *api.GetSwabRequest) (*api.GetSwabResponse, error)
        + GetSwabs(ctx context.Context, req *api.GetSwabsRequest) (*api.GetSwabsResponse, error)
        + UpdateSwab(ctx context.Context, req *api.UpdateSwabRequest) (*api.UpdateSwabResponse, error)
        + UpdateSwabs(ctx context.Context, req *api.UpdateSwabsRequest) (*api.UpdateSwabsResponse, error)
        + DeleteSwab(ctx context.Context, req *api.DeleteSwabRequest) (*api.DeleteSwabResponse, error)
        + DeleteSwabs(ctx context.Context, req *api.DeleteSwabsRequest) (*api.DeleteSwabsResponse, error)
        + CreateDeclaration(ctx context.Context, req *api.CreateDeclarationRequest) (*api.CreateDeclarationResponse, error)
        + GetDeclaration(ctx context.Context, req *api.GetDeclarationRequest) (*api.GetDeclarationResponse, error)
        + GetDeclarations(ctx context.Context, in *api.GetDeclarationsRequest) (*api.GetDeclarationsResponse, error)
        + UpdateDeclaration(ctx context.Context, req *api.UpdateDeclarationRequest) (*api.UpdateDeclarationResponse, error)
        + UpdateDeclarations(ctx context.Context, req *api.UpdateDeclarationsRequest) (*api.UpdateDeclarationsResponse, error)
        + DeleteDeclaration(ctx context.Context, req *api.DeleteDeclarationRequest) (*api.DeleteDeclarationResponse, error)
        + DeleteDeclarations(ctx context.Context, req *api.DeleteDeclarationsRequest) (*api.DeleteDeclarationsResponse, error)
        + GetReport(ctx context.Context, req *api.GetReportRequest) (*api.GetReportResponse, error)
        + GetReports(ctx context.Context, req *api.GetReportsRequest) (*api.GetReportsResponse, error)
        + Login(ctx context.Context, req *api.LoginRequest) (*api.LoginResponse, error)
        + Logout(ctx context.Context, req *empty.Empty) (*empty.Empty, error)
        + Refresh(ctx context.Context, req *empty.Empty) (*api.RefreshResponse, error)
        + UpdatePassword(ctx context.Context, req *api.UpdatePasswordRequest) (*empty.Empty, error)
        + GetPasswordReset(ctx context.Context, req *api.GetPasswordResetRequest) (*api.GetPasswordResetResponse, error)
        + ClientCreatePatient(ctx context.Context, req *api.ClientCreatePatientRequest) (*empty.Empty, error)
        + ClientGetPatients(ctx context.Context, req *api.ClientGetPatientsRequest) (*api.ClientGetPatientsResponse, error)
        + ClientGetUndeclaredPatients(ctx context.Context, req *api.ClientGetUndeclaredPatientsRequest) (*api.ClientGetUndeclaredPatientsResponse, error)
        + ClientUpdatePatient(ctx context.Context, req *api.ClientUpdatePatientRequest) (*empty.Empty, error)
        + ClientCreateDeclaration(ctx context.Context, req *api.ClientCreateDeclarationRequest) (*api.ClientCreateDeclarationResponse, error)
        + GetActivities(ctx context.Context, req *api.GetActivitiesRequest) (*api.GetActivitiesResponse, error)

    }
}

namespace model {
    interface IModel  {
        + ClientCreateDeclaration(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + CreateDeclaration(ctx context.Context, declaration *dto.Declaration, patientType int64) (*dto.Declaration, error)
        + GetDeclaration(ctx context.Context, declarationID string, patientType int64) (*dto.Declaration, error)
        + UpdateDeclaration(ctx context.Context, declaration *dto.Declaration, patientType int64) (*dto.Declaration, error)
        + DeleteDeclaration(ctx context.Context, declarationID string, patientType int64) (*dto.Declaration, error)
        + BatchGetDeclarations(ctx context.Context, declarationID []string, patientType int64) ([]*dto.Declaration, error)
        + UpdateDeclarations(ctx context.Context, declaration *dto.Declaration, ids []string, patientType int64) ([]string, error)
        + DeleteDeclarations(ctx context.Context, declarationID []string, patientType int64) ([]string, error)
        + QueryDeclarations(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Declaration, error)
        + QueryDeclarationsByTime(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryDeclarationsByCallingStatusAndTime(ctx context.Context, callingStatus []int64, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryDeclarationsByPatientID(ctx context.Context, id string, patientType int64) (int64, []*dto.Declaration, error)
        + GetStableDeclarations(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + CreatePatient(ctx context.Context, patient *dto.Patient, user *dto.User) (*dto.Patient, error)
        + GetPatient(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + QueryPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Patient, error)
        + BatchGetPatients(ctx context.Context, ids []string, patientType int64) ([]*dto.Patient, error)
        + GetPatientsByStatus(ctx context.Context, status []int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetSwabPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetDeclaredPatientsByTime(ctx context.Context, from int64, patientType int64) ([]*dto.Patient, error)
        + GetUndeclaredPatientsByTime(ctx context.Context, from int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + UpdatePatient(ctx context.Context, patient *dto.Patient, patientType int64, user *dto.User) (*dto.Patient, error)
        + UpdatePatients(ctx context.Context, patient *dto.Patient, ids []string, patientType int64, user *dto.User) ([]string, error)
        + DeletePatient(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + DeletePatients(ctx context.Context, ids []string, patientType int64) ([]string, error)
        + ClientGetPatientsByConsentTime(ctx context.Context, from int64, to int64) ([]*dto.Patient, error)
        + ClientUpdatePatient(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + ClientGetUndeclaredPatientsByTime(ctx context.Context, from int64) ([]*dto.Patient, error)
        + CreateSwab(ctx context.Context, swab *dto.Swab, patientType int64, user *dto.User) (*dto.Swab, error)
        + UpdateSwab(ctx context.Context, swab *dto.Swab, patientType int64, user *dto.User) (*dto.Swab, error)
        + UpdateSwabs(ctx context.Context, swab *dto.Swab, ids []string, patientType int64, user *dto.User) ([]string, error)
        + GetSwab(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + BatchGetSwabs(ctx context.Context, ids []string, patientType int64) ([]*dto.Swab, error)
        + QuerySwabs(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Swab, error)
        + DeleteSwab(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + DeleteSwabs(ctx context.Context, ids []string, patientType int64) ([]string, error)
        + QuerySwabsByPatientID(ctx context.Context, id string, patientType int64) ([]*dto.Swab, error)
        + CreateUser(ctx context.Context, user *dto.User) (*dto.User, error)
        + UpdateUser(ctx context.Context, user *dto.User) (*dto.User, error)
        + UpdateUserPassword(ctx context.Context, user *dto.User) (*dto.User, error)
        + CreateToken(ctx context.Context, auth *dto.AuthObject) (*dto.AuthObject, error)
        + RevokeTokensByUserID(ctx context.Context, id string) error
        + GetUserIDByToken(ctx context.Context, token string) (string, error)
        + UpdateUsers(ctx context.Context, user *dto.User, ids []string) ([]string, error)
        + GetUser(ctx context.Context, id string) (*dto.User, error)
        + BatchGetUsers(ctx context.Context, ids []string) ([]*dto.User, error)
        + QueryUsers(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter *dto.FilterData) (int64, []*dto.User, error)
        + DeleteUser(ctx context.Context, id string) (*dto.User, error)
        + RevokeUserTokens(ctx context.Context) error
        + DeleteUsers(ctx context.Context, ids []string) ([]string, error)
        + Login(ctx context.Context, email string, password string) (*dto.User, error)
        + VerifyUser(ctx context.Context, header string) (*dto.User, error)
        + Logout(ctx context.Context, header string) error
        + Refresh(ctx context.Context, header string) (*dto.User, error)
        + GetDeclarationReport(ctx context.Context, dateString string, patientType int64) (*dto.DeclarationReport, error)
        + GetDeclarationReports(ctx context.Context, from string, to string, patientType int64) ([]*dto.DeclarationReport, error)
        + GetCallingReport(ctx context.Context, date string, patientType int64) (*dto.CallingReport, error)
        + GetCallingReports(ctx context.Context, from string, to string, patientType int64) ([]*dto.CallingReport, error)
        + GetPatientStatusReport(ctx context.Context, dateString string, patientType int64) (*dto.PatientStatusReport, error)
        + GetPatientStatusReports(ctx context.Context, from string, to string, patientType int64) ([]*dto.PatientStatusReport, error)
        + GenerateReport(ctx context.Context, date string) error
        + SyncDays(ctx context.Context) error
        + SyncPatientReport(ctx context.Context) error
        + CreateActivity(ctx context.Context, activity *dto.Activity) (*dto.Activity, error)
        + QueryActivities(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int64, []*dto.Activity, error)

    }
    class Model << (S,Aquamarine) >> {
        - declarationDAO dao.IDeclarationDAO
        - patientDAO dao.IPatientDAO
        - swabDAO dao.ISwabDAO
        - userDAO dao.IUserDAO
        - declarationReportDAO dao.IDeclarationReport
        - callingReportDAO dao.ICallingReport
        - patientStatusReportDAO dao.IPatientStatusReport
        - authDAO dao.IAuthDAO
        - activityDAO dao.IActivityDAO

        - createSwabActivity(ctx context.Context, oldSwab *dto.Swab, newSwab *dto.Swab, user *dto.User) (*dto.Activity, error)
        - verifyPassword(hashPassword string, plainPassword string) bool
        - createToken(id string) (*dto.User, error)
        - createAuth(id string, td *dto.User) error
        - verifyToken(header string) (*jwt.Token, error)
        - extractTokenMetadata(header string) (*dto.User, error)
        - fetchAuth(authD *dto.User) (string, error)
        - extractToken(header string) string
        - deleteAuth(givenUuid string) error
        - createPatientActivity(ctx context.Context, oldPatient *dto.Patient, newPatient *dto.Patient, user *dto.User) (*dto.Activity, error)
    }
}

"dao.IActivityDAO" -[hidden]--> "dao.IAuthDAO"
"dao.IAuthDAO" -[hidden]--> "dao.ICallingReport"
"dao.ICallingReport" -[hidden]--> "dao.IDeclarationDAO"
"dao.IDeclarationDAO" -[hidden]--> "dao.IDeclarationReport"
"dao.IDeclarationReport" -[hidden]--> "dao.IPatientDAO"
"dao.IPatientDAO" -[hidden]--> "dao.IPatientStatusReport"
"dao.IPatientStatusReport" -[hidden]--> "dao.ISwabDAO"
"dao.ISwabDAO" -[hidden]--> "dao.IUserDAO"

"dto.Activity" -[hidden]--> "dto.AuthObject"
"dto.AuthObject" -[hidden]--> "dto.CallingReport"
"dto.CallingReport" -[hidden]--> "dto.Declaration"
"dto.Declaration" -[hidden]--> "dto.DeclarationReport"
"dto.DeclarationReport" -[hidden]--> "dto.Patient"
"dto.Patient" -[hidden]--> "dto.PatientStatusReport"
"dto.PatientStatusReport" -[hidden]--> "dto.Swab"
"dto.Swab" -[hidden]--> "dto.User"

"model.IModel" -- "handlers.IHandlers" : < operates on

"dao.IActivityDAO" -- "model.IModel" : < operates on
"dao.IAuthDAO" -- "model.IModel" : < operates on
"dao.ICallingReport" -- "model.IModel" : < operates on
"dao.IDeclarationDAO" -- "model.IModel" : < operates on
"dao.IDeclarationReport" -- "model.IModel" : < operates on
"dao.IPatientDAO" -- "model.IModel" : < operates on
"dao.IPatientStatusReport" -- "model.IModel" : < operates on
"dao.ISwabDAO" -- "model.IModel" : < operates on
"dao.IUserDAO" -- "model.IModel" : < operates on

"dto.Activity" -- "dao.IActivityDAO" : < operates on
"dto.AuthObject" -- "dao.IAuthDAO" : < operates on
"dto.CallingReport" -- "dao.ICallingReport" : < operates on
"dto.Declaration" -- "dao.IDeclarationDAO" : < operates on
"dto.DeclarationReport" -- "dao.IDeclarationReport" : < operates on
"dto.Patient" -- "dao.IPatientDAO" : < operates on
"dto.PatientStatusReport" -- "dao.IPatientStatusReport" : < operates on
"dto.Swab" -- "dao.ISwabDAO" : < operates on
"dto.User" -- "dao.IUserDAO" : < operates on

"model.IModel" <|.. "model.Model"
"handlers.IHandlers" <|.. "handlers.Handlers"
"dao.IActivityDAO" <|. "dao.ActivityDAO"
"dao.IAuthDAO" <|. "dao.AuthDAO"
"dao.ICallingReport" <|. "dao.CallingReportDAO"
"dao.IDeclarationDAO" <|. "dao.DeclarationDAO"
"dao.IDeclarationReport" <|. "dao.DeclarationReportDAO"
"dao.IPatientDAO" <|. "dao.PatientDAO"
"dao.IPatientStatusReport" <|. "dao.PatientStatusReportDAO"
"dao.ISwabDAO" <|. "dao.SwabDAO"
"dao.IUserDAO" <|. "dao.UserDAO"

@enduml
