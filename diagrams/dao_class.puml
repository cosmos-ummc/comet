@startuml
namespace dao {
    class ActivityDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Activity, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, activity *dto.Activity) (*dto.Activity, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int64, []*dto.Activity, error)

    }
    class AuthDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + InitIndex(ctx context.Context) error
        + Create(ctx context.Context, auth *dto.AuthObject) (*dto.AuthObject, error)
        + Get(ctx context.Context, token string) (*dto.AuthObject, error)
        + Delete(ctx context.Context, token string) error
        + DeleteByID(ctx context.Context, id string) error

    }
    class CallingReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, callingReport *dto.CallingReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.CallingReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.CallingReport, error)

    }
    class DeclarationDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Declaration, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Declaration, error)
        + Update(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Delete(ctx context.Context, id string) error
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByTime(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByCallingStatusAndTime(ctx context.Context, callingStatus []int64, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Declaration, error)
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + QueryStableDeclarations(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)

    }
    class DeclarationReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, declarationReport *dto.DeclarationReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.DeclarationReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.DeclarationReport, error)

    }
    interface IActivityDAO  {
        + Create(ctx context.Context, activity *dto.Activity) (*dto.Activity, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) (int64, []*dto.Activity, error)

    }
    interface IAuthDAO  {
        + InitIndex(ctx context.Context) error
        + Create(ctx context.Context, auth *dto.AuthObject) (*dto.AuthObject, error)
        + Get(ctx context.Context, token string) (*dto.AuthObject, error)
        + Delete(ctx context.Context, token string) error
        + DeleteByID(ctx context.Context, id string) error

    }
    interface ICallingReport  {
        + Create(ctx context.Context, date string, callingReport *dto.CallingReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.CallingReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.CallingReport, error)

    }
    interface IDeclarationDAO  {
        + Create(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Get(ctx context.Context, declarationID string, patientType int64) (*dto.Declaration, error)
        + Update(ctx context.Context, declaration *dto.Declaration) (*dto.Declaration, error)
        + Delete(ctx context.Context, declarationID string) error
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByTime(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + QueryByCallingStatusAndTime(ctx context.Context, callingStatus []int64, from int64, patientType int64) (int64, []*dto.Declaration, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Declaration, error)
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + QueryStableDeclarations(ctx context.Context, from int64, patientType int64) (int64, []*dto.Declaration, error)

    }
    interface IDeclarationReport  {
        + Create(ctx context.Context, date string, declarationReport *dto.DeclarationReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.DeclarationReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.DeclarationReport, error)

    }
    interface IPatientDAO  {
        + Create(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Patient, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Patient, error)
        + GetByStatus(ctx context.Context, status []int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetSwabPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetDeclaredByTime(ctx context.Context, from int64, patientType int64) ([]*dto.Patient, error)
        + GetUndeclaredByTime(ctx context.Context, from int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + Update(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + ClientGetUndeclaredByTime(ctx context.Context, from int64) ([]*dto.Patient, error)
        + GetByConsentTime(ctx context.Context, from int64, to int64) ([]*dto.Patient, error)

    }
    interface IPatientStatusReport  {
        + Create(ctx context.Context, date string, patientStatusReport *dto.PatientStatusReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.PatientStatusReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.PatientStatusReport, error)

    }
    interface ISwabDAO  {
        + Create(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Update(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Swab, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Swab, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)

    }
    interface IUserDAO  {
        + Create(ctx context.Context, user *dto.User) (*dto.User, error)
        + Update(ctx context.Context, user *dto.User) (*dto.User, error)
        + Get(ctx context.Context, id string) (*dto.User, error)
        + BatchGet(ctx context.Context, ids []string) ([]*dto.User, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter *dto.FilterData) (int64, []*dto.User, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)

    }
    class PatientDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Patient, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Patient, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Patient, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Patient, error)
        + GetByStatus(ctx context.Context, status []int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetSwabPatients(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetDeclaredByTime(ctx context.Context, from int64, patientType int64) ([]*dto.Patient, error)
        + GetUndeclaredByTime(ctx context.Context, from int64, sort *dto.SortData, itemsRange *dto.RangeData, patientType int64) (int64, []*dto.Patient, error)
        + GetByConsentTime(ctx context.Context, from int64, to int64) ([]*dto.Patient, error)
        + Update(ctx context.Context, patient *dto.Patient) (*dto.Patient, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + ClientGetUndeclaredByTime(ctx context.Context, from int64) ([]*dto.Patient, error)

    }
    class PatientStatusReportDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, date string, patientStatusReport *dto.PatientStatusReport) error
        + UpdateByFields(ctx context.Context, date string, decrementField string, incrementField string, patientType int64) error
        + Get(ctx context.Context, date string) (*dto.PatientStatusReport, error)
        + BatchGet(ctx context.Context, dates []string) ([]*dto.PatientStatusReport, error)

    }
    class SwabDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        - query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter bson.D) (int64, []*dto.Swab, error)
        - parseFilter(filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}) bson.D

        + Create(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)
        + Get(ctx context.Context, id string, patientType int64) (*dto.Swab, error)
        + BatchGet(ctx context.Context, ids []string, patientType int64) ([]*dto.Swab, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter <font color=blue>map</font>[string]<font color=blue>interface</font>{}, patientType int64) (int64, []*dto.Swab, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + Update(ctx context.Context, swab *dto.Swab) (*dto.Swab, error)

    }
    class UserDAO << (S,Aquamarine) >> {
        - client *mongo.Client

        + Create(ctx context.Context, user *dto.User) (*dto.User, error)
        + Get(ctx context.Context, id string) (*dto.User, error)
        + BatchGet(ctx context.Context, ids []string) ([]*dto.User, error)
        + Query(ctx context.Context, sort *dto.SortData, itemsRange *dto.RangeData, filter *dto.FilterData) (int64, []*dto.User, error)
        + Delete(ctx context.Context, id string) error
        + BatchDelete(ctx context.Context, ids []string) ([]string, error)
        + Update(ctx context.Context, user *dto.User) (*dto.User, error)

    }
}

"dao.IActivityDAO" <|-- "dao.ActivityDAO"
"dao.IAuthDAO" <|-- "dao.AuthDAO"
"dao.ICallingReport" <|-- "dao.CallingReportDAO"
"dao.IDeclarationDAO" <|-- "dao.DeclarationDAO"
"dao.IDeclarationReport" <|-- "dao.DeclarationReportDAO"
"dao.IPatientDAO" <|-- "dao.PatientDAO"
"dao.IPatientStatusReport" <|-- "dao.PatientStatusReportDAO"
"dao.ISwabDAO" <|-- "dao.SwabDAO"
"dao.IUserDAO" <|-- "dao.UserDAO"

@enduml
