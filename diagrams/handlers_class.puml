@startuml
namespace activity {
    class GetActivitiesHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - activitiesToResponses(activities []*dto.Activity) *api.GetActivitiesResponse
        - patientToPb(patient *dto.Patient) *api.Patient
        - swabToPb(swab *dto.Swab) *api.Swab

        + GetActivities(ctx context.Context, req *api.GetActivitiesRequest) (*api.GetActivitiesResponse, error)

    }
}


namespace declaration {
    class ClientCreateDeclarationHandler << (S,Aquamarine) >> {
        + Model model.IModel

        + ClientCreateDeclaration(ctx context.Context, req *api.ClientCreateDeclarationRequest) (*api.ClientCreateDeclarationResponse, error)

    }
    class CreateDeclarationHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - declarationToResp(declaration *dto.Declaration) *api.CreateDeclarationResponse
        - processReq(declaration *dto.Declaration) error

        + CreateDeclaration(ctx context.Context, req *api.CreateDeclarationRequest, user *dto.User) (*api.CreateDeclarationResponse, error)

    }
    class DeleteDeclarationHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - declarationToResp(declaration *dto.Declaration) *api.DeleteDeclarationResponse

        + DeleteDeclaration(ctx context.Context, req *api.DeleteDeclarationRequest, user *dto.User) (*api.DeleteDeclarationResponse, error)

    }
    class DeleteDeclarationsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(ids []string) []string

        + DeleteDeclarations(ctx context.Context, req *api.DeleteDeclarationsRequest, user *dto.User) (*api.DeleteDeclarationsResponse, error)

    }
    class GetDeclarationHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - declarationToResp(declaration *dto.Declaration) *api.GetDeclarationResponse

        + GetDeclaration(ctx context.Context, req *api.GetDeclarationRequest, user *dto.User) (*api.GetDeclarationResponse, error)

    }
    class GetDeclarationsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - declarationsToResponses(declarations []*dto.Declaration) *api.GetDeclarationsResponse
        - processReq(ids []string) []string

        + GetDeclarations(ctx context.Context, req *api.GetDeclarationsRequest, user *dto.User) (*api.GetDeclarationsResponse, error)

    }
    class UpdateDeclarationHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToDeclaration(req *api.UpdateDeclarationRequest) *dto.Declaration
        - declarationToResp(declaration *dto.Declaration) *api.UpdateDeclarationResponse
        - processReq(declaration *dto.Declaration) error

        + UpdateDeclaration(ctx context.Context, req *api.UpdateDeclarationRequest, user *dto.User) (*api.UpdateDeclarationResponse, error)

    }
    class UpdateDeclarationsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToDeclaration(req *api.UpdateDeclarationsRequest) *dto.Declaration
        - processReq(declaration *dto.Declaration) error

        + UpdateDeclarations(ctx context.Context, req *api.UpdateDeclarationsRequest, user *dto.User) (*api.UpdateDeclarationsResponse, error)

    }
}


namespace handlers {
    class Handlers << (S,Aquamarine) >> {
        + Model model.IModel

        - validateUser(ctx context.Context, roles []string) (*dto.User, error)

        + CreatePatient(ctx context.Context, req *api.CreatePatientRequest) (*api.CreatePatientResponse, error)
        + GetPatient(ctx context.Context, req *api.GetPatientRequest) (*api.GetPatientResponse, error)
        + GetPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetUndeclaredPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetNoCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetSwabPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetOtherPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetStablePatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + UpdatePatient(ctx context.Context, req *api.UpdatePatientRequest) (*api.UpdatePatientResponse, error)
        + UpdatePatients(ctx context.Context, req *api.UpdatePatientsRequest) (*api.UpdatePatientsResponse, error)
        + DeletePatient(ctx context.Context, req *api.DeletePatientRequest) (*api.DeletePatientResponse, error)
        + DeletePatients(ctx context.Context, req *api.DeletePatientsRequest) (*api.DeletePatientsResponse, error)
        + CreateUser(ctx context.Context, req *api.CreateUserRequest) (*api.CreateUserResponse, error)
        + GetUser(ctx context.Context, req *api.GetUserRequest) (*api.GetUserResponse, error)
        + GetUsers(ctx context.Context, req *api.GetUsersRequest) (*api.GetUsersResponse, error)
        + UpdateUser(ctx context.Context, req *api.UpdateUserRequest) (*api.UpdateUserResponse, error)
        + UpdateUsers(ctx context.Context, req *api.UpdateUsersRequest) (*api.UpdateUsersResponse, error)
        + DeleteUser(ctx context.Context, req *api.DeleteUserRequest) (*api.DeleteUserResponse, error)
        + DeleteUsers(ctx context.Context, req *api.DeleteUsersRequest) (*api.DeleteUsersResponse, error)
        + CreateSwab(ctx context.Context, req *api.CreateSwabRequest) (*api.CreateSwabResponse, error)
        + GetSwab(ctx context.Context, req *api.GetSwabRequest) (*api.GetSwabResponse, error)
        + GetSwabs(ctx context.Context, req *api.GetSwabsRequest) (*api.GetSwabsResponse, error)
        + UpdateSwab(ctx context.Context, req *api.UpdateSwabRequest) (*api.UpdateSwabResponse, error)
        + UpdateSwabs(ctx context.Context, req *api.UpdateSwabsRequest) (*api.UpdateSwabsResponse, error)
        + DeleteSwab(ctx context.Context, req *api.DeleteSwabRequest) (*api.DeleteSwabResponse, error)
        + DeleteSwabs(ctx context.Context, req *api.DeleteSwabsRequest) (*api.DeleteSwabsResponse, error)
        + CreateDeclaration(ctx context.Context, req *api.CreateDeclarationRequest) (*api.CreateDeclarationResponse, error)
        + GetDeclaration(ctx context.Context, req *api.GetDeclarationRequest) (*api.GetDeclarationResponse, error)
        + GetDeclarations(ctx context.Context, req *api.GetDeclarationsRequest) (*api.GetDeclarationsResponse, error)
        + UpdateDeclaration(ctx context.Context, req *api.UpdateDeclarationRequest) (*api.UpdateDeclarationResponse, error)
        + UpdateDeclarations(ctx context.Context, req *api.UpdateDeclarationsRequest) (*api.UpdateDeclarationsResponse, error)
        + DeleteDeclaration(ctx context.Context, req *api.DeleteDeclarationRequest) (*api.DeleteDeclarationResponse, error)
        + DeleteDeclarations(ctx context.Context, req *api.DeleteDeclarationsRequest) (*api.DeleteDeclarationsResponse, error)
        + GetReport(ctx context.Context, req *api.GetReportRequest) (*api.GetReportResponse, error)
        + GetReports(ctx context.Context, req *api.GetReportsRequest) (*api.GetReportsResponse, error)
        + Login(ctx context.Context, req *api.LoginRequest) (*api.LoginResponse, error)
        + Logout(ctx context.Context, _ *empty.Empty) (*empty.Empty, error)
        + Refresh(ctx context.Context, _ *empty.Empty) (*api.RefreshResponse, error)
        + UpdatePassword(ctx context.Context, req *api.UpdatePasswordRequest) (*empty.Empty, error)
        + GetPasswordReset(ctx context.Context, req *api.GetPasswordResetRequest) (*api.GetPasswordResetResponse, error)
        + ClientCreatePatient(ctx context.Context, req *api.ClientCreatePatientRequest) (*empty.Empty, error)
        + ClientGetPatients(ctx context.Context, req *api.ClientGetPatientsRequest) (*api.ClientGetPatientsResponse, error)
        + ClientGetUndeclaredPatients(ctx context.Context, req *api.ClientGetUndeclaredPatientsRequest) (*api.ClientGetUndeclaredPatientsResponse, error)
        + ClientUpdatePatient(ctx context.Context, req *api.ClientUpdatePatientRequest) (*empty.Empty, error)
        + ClientCreateDeclaration(ctx context.Context, req *api.ClientCreateDeclarationRequest) (*api.ClientCreateDeclarationResponse, error)
        + GetActivities(ctx context.Context, req *api.GetActivitiesRequest) (*api.GetActivitiesResponse, error)

    }
    interface IHandlers  {
        + CreatePatient(ctx context.Context, req *api.CreatePatientRequest) (*api.CreatePatientResponse, error)
        + GetPatient(ctx context.Context, req *api.GetPatientRequest) (*api.GetPatientResponse, error)
        + GetPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetUndeclaredPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetNoCallPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetSwabPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetOtherPatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + GetStablePatients(ctx context.Context, req *api.GetPatientsRequest) (*api.GetPatientsResponse, error)
        + UpdatePatient(ctx context.Context, req *api.UpdatePatientRequest) (*api.UpdatePatientResponse, error)
        + UpdatePatients(ctx context.Context, req *api.UpdatePatientsRequest) (*api.UpdatePatientsResponse, error)
        + DeletePatient(ctx context.Context, req *api.DeletePatientRequest) (*api.DeletePatientResponse, error)
        + DeletePatients(ctx context.Context, req *api.DeletePatientsRequest) (*api.DeletePatientsResponse, error)
        + CreateUser(ctx context.Context, req *api.CreateUserRequest) (*api.CreateUserResponse, error)
        + GetUser(ctx context.Context, req *api.GetUserRequest) (*api.GetUserResponse, error)
        + GetUsers(ctx context.Context, req *api.GetUsersRequest) (*api.GetUsersResponse, error)
        + UpdateUser(ctx context.Context, req *api.UpdateUserRequest) (*api.UpdateUserResponse, error)
        + UpdateUsers(ctx context.Context, req *api.UpdateUsersRequest) (*api.UpdateUsersResponse, error)
        + DeleteUser(ctx context.Context, req *api.DeleteUserRequest) (*api.DeleteUserResponse, error)
        + DeleteUsers(ctx context.Context, req *api.DeleteUsersRequest) (*api.DeleteUsersResponse, error)
        + CreateSwab(ctx context.Context, req *api.CreateSwabRequest) (*api.CreateSwabResponse, error)
        + GetSwab(ctx context.Context, req *api.GetSwabRequest) (*api.GetSwabResponse, error)
        + GetSwabs(ctx context.Context, req *api.GetSwabsRequest) (*api.GetSwabsResponse, error)
        + UpdateSwab(ctx context.Context, req *api.UpdateSwabRequest) (*api.UpdateSwabResponse, error)
        + UpdateSwabs(ctx context.Context, req *api.UpdateSwabsRequest) (*api.UpdateSwabsResponse, error)
        + DeleteSwab(ctx context.Context, req *api.DeleteSwabRequest) (*api.DeleteSwabResponse, error)
        + DeleteSwabs(ctx context.Context, req *api.DeleteSwabsRequest) (*api.DeleteSwabsResponse, error)
        + CreateDeclaration(ctx context.Context, req *api.CreateDeclarationRequest) (*api.CreateDeclarationResponse, error)
        + GetDeclaration(ctx context.Context, req *api.GetDeclarationRequest) (*api.GetDeclarationResponse, error)
        + GetDeclarations(ctx context.Context, in *api.GetDeclarationsRequest) (*api.GetDeclarationsResponse, error)
        + UpdateDeclaration(ctx context.Context, req *api.UpdateDeclarationRequest) (*api.UpdateDeclarationResponse, error)
        + UpdateDeclarations(ctx context.Context, req *api.UpdateDeclarationsRequest) (*api.UpdateDeclarationsResponse, error)
        + DeleteDeclaration(ctx context.Context, req *api.DeleteDeclarationRequest) (*api.DeleteDeclarationResponse, error)
        + DeleteDeclarations(ctx context.Context, req *api.DeleteDeclarationsRequest) (*api.DeleteDeclarationsResponse, error)
        + GetReport(ctx context.Context, req *api.GetReportRequest) (*api.GetReportResponse, error)
        + GetReports(ctx context.Context, req *api.GetReportsRequest) (*api.GetReportsResponse, error)
        + Login(ctx context.Context, req *api.LoginRequest) (*api.LoginResponse, error)
        + Logout(ctx context.Context, req *empty.Empty) (*empty.Empty, error)
        + Refresh(ctx context.Context, req *empty.Empty) (*api.RefreshResponse, error)
        + UpdatePassword(ctx context.Context, req *api.UpdatePasswordRequest) (*empty.Empty, error)
        + GetPasswordReset(ctx context.Context, req *api.GetPasswordResetRequest) (*api.GetPasswordResetResponse, error)
        + ClientCreatePatient(ctx context.Context, req *api.ClientCreatePatientRequest) (*empty.Empty, error)
        + ClientGetPatients(ctx context.Context, req *api.ClientGetPatientsRequest) (*api.ClientGetPatientsResponse, error)
        + ClientGetUndeclaredPatients(ctx context.Context, req *api.ClientGetUndeclaredPatientsRequest) (*api.ClientGetUndeclaredPatientsResponse, error)
        + ClientUpdatePatient(ctx context.Context, req *api.ClientUpdatePatientRequest) (*empty.Empty, error)
        + ClientCreateDeclaration(ctx context.Context, req *api.ClientCreateDeclarationRequest) (*api.ClientCreateDeclarationResponse, error)
        + GetActivities(ctx context.Context, req *api.GetActivitiesRequest) (*api.GetActivitiesResponse, error)

    }
}

"handlers.IHandlers" <|-- "handlers.Handlers"

namespace patient {
    class ClientCreatePatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(req *api.ClientCreatePatientRequest) *dto.Patient

        + ClientCreatePatient(ctx context.Context, req *api.ClientCreatePatientRequest) (*empty.Empty, error)

    }
    class ClientGetPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResp(patients []*dto.Patient) *api.ClientGetPatientsResponse
        - processReq(req *api.ClientGetPatientsRequest) 

        + ClientGetPatients(ctx context.Context, req *api.ClientGetPatientsRequest) (*api.ClientGetPatientsResponse, error)

    }
    class ClientGetUndeclaredPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResp(patients []*dto.Patient) *api.ClientGetUndeclaredPatientsResponse

        + ClientGetUndeclaredPatients(ctx context.Context, req *api.ClientGetUndeclaredPatientsRequest) (*api.ClientGetUndeclaredPatientsResponse, error)

    }
    class ClientUpdatePatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(req *api.ClientUpdatePatientRequest) *dto.Patient

        + ClientUpdatePatient(ctx context.Context, req *api.ClientUpdatePatientRequest) (*empty.Empty, error)

    }
    class CreatePatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - validateAndProcessReq(req *api.CreatePatientRequest) (*dto.Patient, error)
        - patientToResp(patient *dto.Patient) *api.CreatePatientResponse

        + CreatePatient(ctx context.Context, req *api.CreatePatientRequest, user *dto.User) (*api.CreatePatientResponse, error)

    }
    class DeletePatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(req *api.DeletePatientRequest) 
        - patientToResp(patient *dto.Patient) *api.DeletePatientResponse

        + DeletePatient(ctx context.Context, req *api.DeletePatientRequest, user *dto.User) (*api.DeletePatientResponse, error)

    }
    class DeletePatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(ids []string) []string

        + DeletePatients(ctx context.Context, req *api.DeletePatientsRequest, user *dto.User) (*api.DeletePatientsResponse, error)

    }
    class GetCallPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse
        - sortPatients(patients []*dto.Patient, field string, order string) 

        + GetCallPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetNoCallPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse
        - sortPatients(patients []*dto.Patient, field string, order string) 

        + GetNoCallPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetOtherPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse

        + GetOtherPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetPatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientToResponse(patient *dto.Patient) *api.GetPatientResponse
        - processReq(req *api.GetPatientRequest) 

        + GetPatient(ctx context.Context, req *api.GetPatientRequest, user *dto.User) (*api.GetPatientResponse, error)

    }
    class GetPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse
        - processReq(ids []string) []string

        + GetPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetStablePatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse
        - sortPatients(patients []*dto.Patient, field string, order string) 

        + GetStablePatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetSwabPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse

        + GetSwabPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class GetUndeclaredPatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - patientsToResponses(patients []*dto.Patient) *api.GetPatientsResponse

        + GetUndeclaredPatients(ctx context.Context, req *api.GetPatientsRequest, user *dto.User) (*api.GetPatientsResponse, error)

    }
    class UpdatePatientHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - validateAndProcessReq(req *api.UpdatePatientRequest) (*dto.Patient, error)
        - patientToResp(patient *dto.Patient) *api.UpdatePatientResponse

        + UpdatePatient(ctx context.Context, req *api.UpdatePatientRequest, user *dto.User) (*api.UpdatePatientResponse, error)

    }
    class UpdatePatientsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - validateAndProcessReq(req *api.UpdatePatientsRequest) (*dto.Patient, error)

        + UpdatePatients(ctx context.Context, req *api.UpdatePatientsRequest, user *dto.User) (*api.UpdatePatientsResponse, error)

    }
}


namespace report {
    class GetReportHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - callingReportToResponse(report *dto.CallingReport) *api.GetReportResponse
        - declarationReportToResponse(report *dto.DeclarationReport) *api.GetReportResponse
        - patientStatusReportToResponse(report *dto.PatientStatusReport) *api.GetReportResponse
        - processReq(req *api.GetReportRequest) error

        + GetReport(ctx context.Context, req *api.GetReportRequest, user *dto.User) (*api.GetReportResponse, error)

    }
    class GetReportsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - callingReportsToResponse(reports []*dto.CallingReport) *api.GetReportsResponse
        - declarationReportsToResponse(reports []*dto.DeclarationReport) *api.GetReportsResponse
        - patientStatusReportsToResponse(reports []*dto.PatientStatusReport) *api.GetReportsResponse
        - processReq(req *api.GetReportsRequest) 

        + GetReports(ctx context.Context, req *api.GetReportsRequest, user *dto.User) (*api.GetReportsResponse, error)

    }
}


namespace swab {
    class CreateSwabHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processAndValidateReq(swab *dto.Swab) error
        - swabToResp(swab *dto.Swab) *api.CreateSwabResponse

        + CreateSwab(ctx context.Context, req *api.CreateSwabRequest, user *dto.User) (*api.CreateSwabResponse, error)

    }
    class DeleteSwabHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - swabToResp(swab *dto.Swab) *api.DeleteSwabResponse

        + DeleteSwab(ctx context.Context, req *api.DeleteSwabRequest, user *dto.User) (*api.DeleteSwabResponse, error)

    }
    class DeleteSwabsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - processReq(ids []string) []string

        + DeleteSwabs(ctx context.Context, req *api.DeleteSwabsRequest, user *dto.User) (*api.DeleteSwabsResponse, error)

    }
    class GetSwabHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - swabToResponse(swab *dto.Swab) *api.GetSwabResponse

        + GetSwab(ctx context.Context, req *api.GetSwabRequest, user *dto.User) (*api.GetSwabResponse, error)

    }
    class GetSwabsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - swabsToResponses(swabs []*dto.Swab) *api.GetSwabsResponse
        - processReq(ids []string) []string

        + GetSwabs(ctx context.Context, req *api.GetSwabsRequest, user *dto.User) (*api.GetSwabsResponse, error)

    }
    class UpdateSwabHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToSwab(req *api.UpdateSwabRequest) *dto.Swab
        - swabToResp(swab *dto.Swab) *api.UpdateSwabResponse
        - processAndValidateReq(swab *dto.Swab) error

        + UpdateSwab(ctx context.Context, req *api.UpdateSwabRequest, user *dto.User) (*api.UpdateSwabResponse, error)

    }
    class UpdateSwabsHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToSwab(req *api.UpdateSwabsRequest) *dto.Swab
        - processAndValidateReq(swab *dto.Swab, ids []string) error

        + UpdateSwabs(ctx context.Context, req *api.UpdateSwabsRequest, user *dto.User) (*api.UpdateSwabsResponse, error)

    }
}


namespace user {
    class CreateUserHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - validateAndProcessReq(user *dto.User) error
        - userToResp(user *dto.User) *api.CreateUserResponse

        + CreateUser(ctx context.Context, req *api.CreateUserRequest) (*api.CreateUserResponse, error)

    }
    class DeleteUserHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - userToResp(user *dto.User) *api.DeleteUserResponse

        + DeleteUser(ctx context.Context, req *api.DeleteUserRequest) (*api.DeleteUserResponse, error)

    }
    class DeleteUsersHandler << (S,Aquamarine) >> {
        + Model model.IModel

        + DeleteUsers(ctx context.Context, req *api.DeleteUsersRequest) (*api.DeleteUsersResponse, error)

    }
    class GetPasswordResetHandler << (S,Aquamarine) >> {
        + Model model.IModel

        + GetPasswordReset(ctx context.Context, req *api.GetPasswordResetRequest) (*api.GetPasswordResetResponse, error)

    }
    class GetUserHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - userToResponse(user *dto.User) (*api.GetUserResponse, error)

        + GetUser(ctx context.Context, req *api.GetUserRequest) (*api.GetUserResponse, error)

    }
    class GetUsersHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - usersToResponses(users []*dto.User) (*api.GetUsersResponse, error)

        + GetUsers(ctx context.Context, req *api.GetUsersRequest) (*api.GetUsersResponse, error)

    }
    class LoginHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - userToResp(user *dto.User) *api.LoginResponse

        + Login(ctx context.Context, req *api.LoginRequest) (*api.LoginResponse, error)

    }
    class LogoutHandler << (S,Aquamarine) >> {
        + Model model.IModel

        + Logout(ctx context.Context) (*empty.Empty, error)

    }
    class RefreshHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - userToResp(user *dto.User) *api.RefreshResponse

        + Refresh(ctx context.Context) (*api.RefreshResponse, error)

    }
    class UpdatePasswordHandler << (S,Aquamarine) >> {
        + Model model.IModel

        + UpdatePassword(ctx context.Context, req *api.UpdatePasswordRequest) (*empty.Empty, error)

    }
    class UpdateUserHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToUser(req *api.UpdateUserRequest) *dto.User
        - userToResp(user *dto.User) *api.UpdateUserResponse
        - validateAndProcessReq(user *dto.User) error

        + UpdateUser(ctx context.Context, req *api.UpdateUserRequest) (*api.UpdateUserResponse, error)

    }
    class UpdateUsersHandler << (S,Aquamarine) >> {
        + Model model.IModel

        - reqToUser(req *api.UpdateUsersRequest) *dto.User
        - validateAndProcessReq(user *dto.User) error

        + UpdateUsers(ctx context.Context, req *api.UpdateUsersRequest) (*api.UpdateUsersResponse, error)

    }
}


@enduml
