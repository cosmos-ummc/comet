syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
	    description: "MHPSS Service handles requests from Telegram chat bot, admin dashboard and client website.";
        title: "MHPSS Service";
        version: "1.0.0";
        contact:{
            url: "https://github.com/cosmos-ummc/comet";
            email: "chinxiongwei@yahoo.com.my";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

// MHPSS Backend Service
service MhpssService {
    // Create Patient
    rpc CreatePatient (CommonPatientRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            post: "/v1/patients/{id}"
            body: "*"
        };
    }
    // Get Patient
    rpc GetPatient (CommonGetRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            get: "/v1/patients/{id}"
        };
    }
    // Update Patient
    rpc UpdatePatient (CommonPatientRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            put: "/v1/patients/{id}"
            body: "*"
        };
    }
    // Update Patients
    rpc UpdatePatients (CommonPatientsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/patients"
            body: "*"
        };
    }
    // Delete Patient
    rpc DeletePatient (CommonDeleteRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            delete: "/v1/patients/{id}"
        };
    }
    // Delete Patients
    rpc DeletePatients (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/patients"
        };
    }
    // Get Patients
    rpc GetPatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/patients"
        };
    }
    // Get Undeclared Patients
    rpc GetUndeclaredPatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/undeclaredpatients"
        };
    }
    // Get Stable Patients
    rpc GetStablePatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/stablepatients"
        };
    }
    // Get Unstable Patients
    rpc GetUnstablePatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/unstablepatients"
        };
    }
    // Create User
    rpc CreateUser (CommonUserRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            post: "/v1/users/{id}"
            body: "*"
        };
    }
    // Get Users
    rpc GetUsers (CommonGetsRequest) returns (CommonUsersResponse) {
        option (google.api.http) = {
            get: "/v1/users"
        };
    }
    // Get User
    rpc GetUser (CommonGetRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            get: "/v1/users/{id}"
        };
    }
    // Update User
    rpc UpdateUser (CommonUserRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            put: "/v1/users/{id}"
            body: "*"
        };
    }
    // Update Users
    rpc UpdateUsers (CommonUsersRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/users"
            body: "*"
        };
    }
    // Delete User
    rpc DeleteUser (CommonDeleteRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            delete: "/v1/users/{id}"
        };
    }
    // Delete Users
    rpc DeleteUsers (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/users"
        };
    }
    // Create Declaration
    rpc CreateDeclaration (CommonDeclarationRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            post: "/v1/declarations/{id}"
            body: "*"
        };
    }
    // Get Declarations
    rpc GetDeclarations (CommonGetsRequest) returns (CommonDeclarationsResponse) {
        option (google.api.http) = {
            get: "/v1/declarations"
        };
    }
    // Get Declaration
    rpc GetDeclaration (CommonGetRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            get: "/v1/declarations/{id}"
        };
    }
    // Update Declaration
    rpc UpdateDeclaration (CommonDeclarationRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            put: "/v1/declarations/{id}"
            body: "*"
        };
    }
    // Update Declarations
    rpc UpdateDeclarations (CommonDeclarationsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/declarations"
            body: "*"
        };
    }
    // Delete Declaration
    rpc DeleteDeclaration (CommonDeleteRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            delete: "/v1/declarations/{id}"
        };
    }
    // Delete Declarations
    rpc DeleteDeclarations (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/declarations"
        };
    }
    // Get Report
    rpc GetReport (GetReportRequest) returns (CommonReportResponse) {
        option (google.api.http) = {
            get: "/v1/reports/{date}"
        };
    }
    // Get Reports
    rpc GetReports (GetReportsRequest) returns (CommonReportsResponse) {
        option (google.api.http) = {
            get: "/v1/reports"
        };
    }
    // Create Question
    rpc CreateQuestion (CommonQuestionRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            post: "/v1/questions/{id}"
            body: "*"
        };
    }
    // Get Question
    rpc GetQuestion (CommonGetRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            get: "/v1/questions/{id}"
        };
    }
    // Update Question
    rpc UpdateQuestion (CommonQuestionRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            put: "/v1/questions/{id}"
            body: "*"
        };
    }
    // Update Questions
    rpc UpdateQuestions (CommonQuestionsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/questions"
            body: "*"
        };
    }
    // Delete Question
    rpc DeleteQuestion (CommonDeleteRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            delete: "/v1/questions/{id}"
        };
    }
    // Delete Questions
    rpc DeleteQuestions (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/questions"
        };
    }
    // Get Questions
    rpc GetQuestions (CommonGetsRequest) returns (CommonQuestionsResponse) {
        option (google.api.http) = {
            get: "/v1/questions"
        };
    }
    // Get Password Reset
    rpc GetPasswordReset (GetPasswordResetRequest) returns (GetPasswordResetResponse) {
        option (google.api.http) = {
            get: "/v1/users/{id}/passwordreset"
        };
    }
    // Update Password
    rpc UpdatePassword (UpdatePasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/users/passwordreset/{token}"
            body: "*"
        };
    }
    // Login
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }
    // Logout
    rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/logout"
        };
    }
    // Refresh
    rpc Refresh (google.protobuf.Empty) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/v1/refresh"
            body: "*"
        };
    }
    // Client Update Patient
    rpc ClientUpdatePatient (ClientUpdatePatientRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/client/patients/{id}"
            body: "*"
        };
    }
    // Client Update Patient V2
    rpc ClientUpdatePatientV2 (ClientUpdatePatientRequest) returns (ClientUpdatePatientV2Response) {
        option (google.api.http) = {
            put: "/v2/client/patients/{id}"
            body: "*"
        };
    }
    // Client Get Patients
    rpc ClientGetPatients (ClientGetPatientsRequest) returns (ClientGetPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/client/patients"
        };
    }
    // Client Get Patient V2
    rpc ClientGetPatientV2 (ClientGetPatientV2Request) returns (ClientGetPatientV2Response) {
        option (google.api.http) = {
            get: "/v2/client/patients"
        };
    }
    // Client Get Undeclared Patients
    rpc ClientGetUndeclaredPatients (ClientGetUndeclaredPatientsRequest) returns (ClientGetUndeclaredPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/client/patients/undeclared"
        };
    }
    // Client Create Declaration
    rpc ClientCreateDeclaration (ClientCreateDeclarationRequest) returns (ClientCreateDeclarationResponse) {
        option (google.api.http) = {
            post: "/v1/client/declarations"
            body: "*"
        };
    }
}

// common gets request payload
message CommonGetsRequest {
    // item to sort
    string item = 1;
    // item to order
    string order = 2;
    // pagination from
    int64 from = 3;
    // pagination to
    int64 to = 4;
    // item to filter
    string filterItem = 5;
    // value to filter
    string filterValue = 6;
    // patient ids
    repeated string ids = 7;
}

// common get request payload
message CommonGetRequest {
    // patient IC / passport
    string id = 1;
}

// common delete request payload
message CommonDeleteRequest {
    // id
    string id = 1;
}

// common batch delete request payload
message CommonDeletesRequest {
    // ids
    repeated string ids = 1;
}

// common Ids response
message CommonIdsResponse {
    // ids
    repeated string data = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

// get password reset request payload
message GetPasswordResetRequest {
    // user id
    string id = 1;
}

// get password reset request payload
message UpdatePasswordRequest {
    // token
    string token = 1;
    // password
    string password = 2;
}

message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
    string displayName = 3;
    string role = 4;
    string id = 5;
}

message RefreshResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

// get password reset response payload
message GetPasswordResetResponse {
    // password reset message
    string message = 1;
}

// patient payload
message Patient {
    // patient IC / passport number
    string id = 1;
    // patient telegram ID
    string telegramId = 2;
    // patient name
    string name = 3;
    // patient status (1 - Symptomatic, 2 - Asymptomatic，3 - Confirmed but not Admitted, 4 - Confirmed and Admitted, 5 - Completed, 6 - Recovered, 7 - Quit, 8 - Passed Away)
    int64 status = 4;
    // patient phone number
    string phoneNumber = 5;
    // patient email
    string email = 6;
    // patient isolation address
    string isolationAddress = 7;
    // doctors' remarks on patient
    string remarks = 8;
    // patient consent signing time in milliseconds
    int64 consent = 9;
    // patient privacy policy signing time in milliseconds
    int64 privacyPolicy = 10;
    // patient home address
    string homeAddress = 11;
    int64 lastDassTime = 12;
    int64 lastIesrTime = 13;
    int64 lastDassResult = 14;
    int64 lastIesrResult = 15;
    int64 registrationStatus = 16;
    string userId = 17;
}

// common patient request payload
message CommonPatientRequest {
    // patient IC / passport
    string id = 1;
    // patient object
    Patient data = 2;
}

// common patients request payload
message CommonPatientsRequest {
    // patient ids
    repeated string ids = 1;
    // patient payload
    Patient data = 2;
}

// common patients response payload
message CommonPatientsResponse {
    // patients payload
    repeated Patient data = 1;
    // total patients
    int64 total = 2;
}

// common patient response payload
message CommonPatientResponse {
    // patient payload
    Patient data = 1;
}

// user payload
message User {
    // user id
    string id = 1;
    // user role: superuser, chatbot, admin, nurse
    string role = 2;
    // user name
    string name = 3;
    // user phone number
    string phoneNumber = 4;
    // user email
    string email = 5;
    // user hashed password
    string password = 6;
    repeated string blockList = 7;
}

// common user request payload
message CommonUserRequest {
    // user id
    string id = 1;
    // user payload
    User data = 2;
}

// common users request payload
message CommonUsersRequest {
    // user ids
    repeated string ids = 1;
    // user payload
    User data = 2;
}

// common users response payload
message CommonUsersResponse {
    // users payload
    repeated User data = 1;
    // total users
    int64 total = 2;
}

// common user response payload
message CommonUserResponse {
    // user payload
    User data = 1;
}

// declaration payload
message Declaration {
    string id = 1;
    // patient IC / passport
    string patientId = 2;
    // patient name
    string patientName = 3;
    // patient phone number
    string patientPhoneNumber = 4;
    repeated Question result = 5;
    string category = 6;
    int64 score = 7;
    int64 status = 8;
    // report submission time in milliseconds
    int64 submittedAt = 9;
    // doctor remarks on the report
    string doctorRemarks = 10;
}

// common declaration request payload
message CommonDeclarationRequest {
    // declaration id (not used )
    string id = 1;
    // declaration payload
    Declaration data = 2;
}

// common declarations request payload
message CommonDeclarationsRequest {
    // declaration ids
    repeated string ids = 1;
    // declaration payload
    Declaration data = 2;
}

// common declaration response payload
message CommonDeclarationResponse {
    // declaration payload
    Declaration data = 1;
}

// get declarations response payload
message CommonDeclarationsResponse {
    // declarations payload
    repeated Declaration data = 1;
    // total declarations
    int64 total = 2;
}

// client update patient request payload
message ClientUpdatePatientRequest {
    // patient telegram ID
    string telegramId = 1;
    // patient name
    string name = 2;
    // patient phone number
    string phoneNumber = 3;
    // patient IC / passport
    string id = 4;
    // patient status (1 - Symptomatic, 2 - Asymptomatic，3 - Confirmed but not Admitted, 4 - Confirmed and Admitted, 5 - Completed, 6 - Recovered, 7 - Quit, 8 - Passed Away)
    int64 status = 5;
    // patient email
    string email = 6;
    // patient latest declare time in milliseconds
    int64 lastDeclared = 7;
    // patient episode
    int64 episode = 8;
    // patient type  (1 - PUI, 2 - Contact Tracing)
    int64 type = 9;
    // patient localization (1 - English, 2 - Malay， 3 - Chinese, 4 - Tamil)
    int64 localization = 10;
    // doctors' remarks on patient
    string remarks = 11;
    // patient consent signing time in milliseconds
    int64 consent = 12;
    // patient privacy policy signing time in milliseconds
    int64 privacyPolicy = 13;
}

// client get patients request payload
message ClientGetPatientsRequest {
    // patient telegram ID
    string telegramId = 1;
    // patient phone number
    string phoneNumber = 2;
    // patient id
    string id = 3;
    // day of monitoring
    int64 day = 4;
}

// client get patients request payload
message ClientGetPatientV2Request {
    // patient telegram ID
    string telegramId = 1;
    // patient phone number
    string phoneNumber = 2;
    // patient id
    string id = 3;
}

// client get undeclared patients request payload
message ClientGetUndeclaredPatientsRequest {
    // undeclared from given millisecond time (deprecated, now depending on 12 am)
    int64 from = 1;
    // undeclared to given millisecond time (deprecated)
    int64 to = 2;
}

// client create declaration request payload
message ClientCreateDeclarationRequest {
    // patient IC / passport
    string patientId = 1;
    Declaration data = 2;
}

// client get patients response payload
message ClientGetPatientsResponse {
    // patients payload
    repeated Patient patients = 1;
}

// client get patient V2 response payload
message ClientGetPatientV2Response {
    Patient data = 1;
}

// client update patient V2 response payload
message ClientUpdatePatientV2Response {
    int64 registrationStatus = 1;
}

// client get undeclared patients response payload
message ClientGetUndeclaredPatientsResponse {
    // patients payload
    repeated Patient patients = 1;
}

// client create declaration response payload
message ClientCreateDeclarationResponse {
    // client report result
    int64 hasSymptom = 1;
}

// report payload
message Report {
    // date of report
    string date = 1;
    map<string, int64> counts = 2;
}

// get report request payload
message GetReportRequest {
    // date of report
    string date = 1;
}

// get reports request payload
message GetReportsRequest {
    // from date (inclusive, in yyyyMMdd format)
    string from = 1;
    // to date (inclusive, in yyyyMMdd format)
    string to = 2;
}

// common report response payload
message CommonReportResponse {
    // report payload
    Report data = 1;
}

// common reports response payload
message CommonReportsResponse {
    // reports payload
    repeated Report data = 1;
}

message Question {
    string id = 1;
    string category = 2;
    string type = 3;
    string content = 4;
    int64 score = 5;
}

// common question request payload
message CommonQuestionRequest {
    // question id (not used )
    string id = 1;
    // question payload
    Question data = 2;
}

// common questions request payload
message CommonQuestionsRequest {
    // question ids
    repeated string ids = 1;
    // question payload
    Question data = 2;
}

// common question response payload
message CommonQuestionResponse {
    // question payload
    Question data = 1;
}

// get questions response payload
message CommonQuestionsResponse {
    // questions payload
    repeated Question data = 1;
    // total questions
    int64 total = 2;
}
