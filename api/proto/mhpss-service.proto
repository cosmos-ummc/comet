syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
	    description: "MHPSS Service handles requests from Telegram chat bot, admin dashboard and client website.";
        title: "MHPSS Service";
        version: "1.0.0";
        contact:{
            url: "https://github.com/cosmos-ummc/comet";
            email: "chinxiongwei@yahoo.com.my";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

// MHPSS Backend Service
service MhpssService {
    // Create Patient
    rpc CreatePatient (CommonPatientRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            post: "/v1/patients/{id}"
            body: "*"
        };
    }
    // Get Patient
    rpc GetPatient (CommonGetRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            get: "/v1/patients/{id}"
        };
    }
    // Update Patient
    rpc UpdatePatient (CommonPatientRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            put: "/v1/patients/{id}"
            body: "*"
        };
    }
    // Update Patients
    rpc UpdatePatients (CommonPatientsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/patients"
            body: "*"
        };
    }
    // Delete Patient
    rpc DeletePatient (CommonDeleteRequest) returns (CommonPatientResponse) {
        option (google.api.http) = {
            delete: "/v1/patients/{id}"
        };
    }
    // Delete Patients
    rpc DeletePatients (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/patients"
        };
    }
    // Get Patients
    rpc GetPatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/patients"
        };
    }
    // Get Undeclared Patients
    rpc GetUndeclaredPatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/undeclaredpatients"
        };
    }
    // Get Stable Patients
    rpc GetStablePatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/stablepatients"
        };
    }
    // Get Unstable Patients
    rpc GetUnstablePatients (CommonGetsRequest) returns (CommonPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/unstablepatients"
        };
    }
    // Create User
    rpc CreateUser (CommonUserRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            post: "/v1/users/{id}"
            body: "*"
        };
    }
    // Get Users
    rpc GetUsers (CommonGetsRequest) returns (CommonUsersResponse) {
        option (google.api.http) = {
            get: "/v1/users"
        };
    }
    // Get User
    rpc GetUser (CommonGetRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            get: "/v1/users/{id}"
        };
    }
    // Update User
    rpc UpdateUser (CommonUserRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            put: "/v1/users/{id}"
            body: "*"
        };
    }
    // Update Users
    rpc UpdateUsers (CommonUsersRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/users"
            body: "*"
        };
    }
    // Delete User
    rpc DeleteUser (CommonDeleteRequest) returns (CommonUserResponse) {
        option (google.api.http) = {
            delete: "/v1/users/{id}"
        };
    }
    // Delete Users
    rpc DeleteUsers (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/users"
        };
    }
    // Create Declaration
    rpc CreateDeclaration (CommonDeclarationRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            post: "/v1/declarations/{id}"
            body: "*"
        };
    }
    // Get Declarations
    rpc GetDeclarations (CommonGetsRequest) returns (CommonDeclarationsResponse) {
        option (google.api.http) = {
            get: "/v1/declarations"
        };
    }
    // Get Declaration
    rpc GetDeclaration (CommonGetRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            get: "/v1/declarations/{id}"
        };
    }
    // Update Declaration
    rpc UpdateDeclaration (CommonDeclarationRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            put: "/v1/declarations/{id}"
            body: "*"
        };
    }
    // Update Declarations
    rpc UpdateDeclarations (CommonDeclarationsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/declarations"
            body: "*"
        };
    }
    // Delete Declaration
    rpc DeleteDeclaration (CommonDeleteRequest) returns (CommonDeclarationResponse) {
        option (google.api.http) = {
            delete: "/v1/declarations/{id}"
        };
    }
    // Delete Declarations
    rpc DeleteDeclarations (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/declarations"
        };
    }
    // Get Report
    rpc GetReport (GetReportRequest) returns (CommonReportResponse) {
        option (google.api.http) = {
            get: "/v1/reports/{date}"
        };
    }
    // Get Reports
    rpc GetReports (GetReportsRequest) returns (CommonReportsResponse) {
        option (google.api.http) = {
            get: "/v1/reports"
        };
    }
    // Create Question
    rpc CreateQuestion (CommonQuestionRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            post: "/v1/questions/{id}"
            body: "*"
        };
    }
    // Get Question
    rpc GetQuestion (CommonGetRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            get: "/v1/questions/{id}"
        };
    }
    // Update Question
    rpc UpdateQuestion (CommonQuestionRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            put: "/v1/questions/{id}"
            body: "*"
        };
    }
    // Update Questions
    rpc UpdateQuestions (CommonQuestionsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/questions"
            body: "*"
        };
    }
    // Delete Question
    rpc DeleteQuestion (CommonDeleteRequest) returns (CommonQuestionResponse) {
        option (google.api.http) = {
            delete: "/v1/questions/{id}"
        };
    }
    // Delete Questions
    rpc DeleteQuestions (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/questions"
        };
    }
    // Get Questions
    rpc GetQuestions (CommonGetsRequest) returns (CommonQuestionsResponse) {
        option (google.api.http) = {
            get: "/v1/questions"
        };
    }
    // Create ChatMessage
    rpc CreateChatMessage (CommonChatMessageRequest) returns (CommonChatMessageResponse) {
        option (google.api.http) = {
            post: "/v1/chatmessages/{id}"
            body: "*"
        };
    }
    // Get ChatMessage
    rpc GetChatMessage (CommonGetRequest) returns (CommonChatMessageResponse) {
        option (google.api.http) = {
            get: "/v1/chatmessages/{id}"
        };
    }
    // Update ChatMessage
    rpc UpdateChatMessage (CommonChatMessageRequest) returns (CommonChatMessageResponse) {
        option (google.api.http) = {
            put: "/v1/chatmessages/{id}"
            body: "*"
        };
    }
    // Update ChatMessages
    rpc UpdateChatMessages (CommonChatMessagesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/chatmessages"
            body: "*"
        };
    }
    // Delete ChatMessage
    rpc DeleteChatMessage (CommonDeleteRequest) returns (CommonChatMessageResponse) {
        option (google.api.http) = {
            delete: "/v1/chatmessages/{id}"
        };
    }
    // Delete ChatMessages
    rpc DeleteChatMessages (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/chatmessages"
        };
    }
    // Get ChatMessages
    rpc GetChatMessages (CommonGetsRequest) returns (CommonChatMessagesResponse) {
        option (google.api.http) = {
            get: "/v1/chatmessages"
        };
    }
    // Create ChatRoom
    rpc CreateChatRoom (CommonChatRoomRequest) returns (CommonChatRoomResponse) {
        option (google.api.http) = {
            post: "/v1/chatrooms/{id}"
            body: "*"
        };
    }
    // Get ChatRoom
    rpc GetChatRoom (CommonGetRequest) returns (CommonChatRoomResponse) {
        option (google.api.http) = {
            get: "/v1/chatrooms/{id}"
        };
    }
    // Update ChatRoom
    rpc UpdateChatRoom (CommonChatRoomRequest) returns (CommonChatRoomResponse) {
        option (google.api.http) = {
            put: "/v1/chatrooms/{id}"
            body: "*"
        };
    }
    // Update ChatRooms
    rpc UpdateChatRooms (CommonChatRoomsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/chatrooms"
            body: "*"
        };
    }
    // Delete ChatRoom
    rpc DeleteChatRoom (CommonDeleteRequest) returns (CommonChatRoomResponse) {
        option (google.api.http) = {
            delete: "/v1/chatrooms/{id}"
        };
    }
    // Delete ChatRooms
    rpc DeleteChatRooms (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/chatrooms"
        };
    }
    // Get ChatRooms
    rpc GetChatRooms (CommonGetsRequest) returns (CommonChatRoomsResponse) {
        option (google.api.http) = {
            get: "/v1/chatrooms"
        };
    }
    // Create Consultant
    rpc CreateConsultant (CommonConsultantRequest) returns (CommonConsultantResponse) {
        option (google.api.http) = {
            post: "/v1/consultants/{id}"
            body: "*"
        };
    }
    // Get Consultant
    rpc GetConsultant (CommonGetRequest) returns (CommonConsultantResponse) {
        option (google.api.http) = {
            get: "/v1/consultants/{id}"
        };
    }
    // Update Consultant
    rpc UpdateConsultant (CommonConsultantRequest) returns (CommonConsultantResponse) {
        option (google.api.http) = {
            put: "/v1/consultants/{id}"
            body: "*"
        };
    }
    // Update Consultants
    rpc UpdateConsultants (CommonConsultantsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/consultants"
            body: "*"
        };
    }
    // Delete Consultant
    rpc DeleteConsultant (CommonDeleteRequest) returns (CommonConsultantResponse) {
        option (google.api.http) = {
            delete: "/v1/consultants/{id}"
        };
    }
    // Delete Consultants
    rpc DeleteConsultants (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/consultants"
        };
    }
    // Get Consultants
    rpc GetConsultants (CommonGetsRequest) returns (CommonConsultantsResponse) {
        option (google.api.http) = {
            get: "/v1/consultants"
        };
    }
    // Create Meeting
    rpc CreateMeeting (CommonMeetingRequest) returns (CommonMeetingResponse) {
        option (google.api.http) = {
            post: "/v1/meetings/{id}"
            body: "*"
        };
    }
    // Get Meeting
    rpc GetMeeting (CommonGetRequest) returns (CommonMeetingResponse) {
        option (google.api.http) = {
            get: "/v1/meetings/{id}"
        };
    }
    // Update Meeting
    rpc UpdateMeeting (CommonMeetingRequest) returns (CommonMeetingResponse) {
        option (google.api.http) = {
            put: "/v1/meetings/{id}"
            body: "*"
        };
    }
    // Update Meetings
    rpc UpdateMeetings (CommonMeetingsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/meetings"
            body: "*"
        };
    }
    // Delete Meeting
    rpc DeleteMeeting (CommonDeleteRequest) returns (CommonMeetingResponse) {
        option (google.api.http) = {
            delete: "/v1/meetings/{id}"
        };
    }
    // Delete Meetings
    rpc DeleteMeetings (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/meetings"
        };
    }
    // Get Meetings
    rpc GetMeetings (CommonGetsRequest) returns (CommonMeetingsResponse) {
        option (google.api.http) = {
            get: "/v1/meetings"
        };
    }
    // Create Game
    rpc CreateGame (CommonGameRequest) returns (CommonGameResponse) {
        option (google.api.http) = {
            post: "/v1/games/{id}"
            body: "*"
        };
    }
    // Get Game
    rpc GetGame (CommonGetRequest) returns (CommonGameResponse) {
        option (google.api.http) = {
            get: "/v1/games/{id}"
        };
    }
    // Update Game
    rpc UpdateGame (CommonGameRequest) returns (CommonGameResponse) {
        option (google.api.http) = {
            put: "/v1/games/{id}"
            body: "*"
        };
    }
    // Update Games
    rpc UpdateGames (CommonGamesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/games"
            body: "*"
        };
    }
    // Delete Game
    rpc DeleteGame (CommonDeleteRequest) returns (CommonGameResponse) {
        option (google.api.http) = {
            delete: "/v1/games/{id}"
        };
    }
    // Delete Games
    rpc DeleteGames (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/games"
        };
    }
    // Get Games
    rpc GetGames (CommonGetsRequest) returns (CommonGamesResponse) {
        option (google.api.http) = {
            get: "/v1/games"
        };
    }
    // Create Feed
    rpc CreateFeed (CommonFeedRequest) returns (CommonFeedResponse) {
        option (google.api.http) = {
            post: "/v1/feeds/{id}"
            body: "*"
        };
    }
    // Get Feed
    rpc GetFeed (CommonGetRequest) returns (CommonFeedResponse) {
        option (google.api.http) = {
            get: "/v1/feeds/{id}"
        };
    }
    // Update Feed
    rpc UpdateFeed (CommonFeedRequest) returns (CommonFeedResponse) {
        option (google.api.http) = {
            put: "/v1/feeds/{id}"
            body: "*"
        };
    }
    // Update Feeds
    rpc UpdateFeeds (CommonFeedsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/feeds"
            body: "*"
        };
    }
    // Delete Feed
    rpc DeleteFeed (CommonDeleteRequest) returns (CommonFeedResponse) {
        option (google.api.http) = {
            delete: "/v1/feeds/{id}"
        };
    }
    // Delete Feeds
    rpc DeleteFeeds (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/feeds"
        };
    }
    // Get Feeds
    rpc GetFeeds (CommonGetsRequest) returns (CommonFeedsResponse) {
        option (google.api.http) = {
            get: "/v1/feeds"
        };
    }
    // Create Meditation
    rpc CreateMeditation (CommonMeditationRequest) returns (CommonMeditationResponse) {
        option (google.api.http) = {
            post: "/v1/meditations/{id}"
            body: "*"
        };
    }
    // Get Meditation
    rpc GetMeditation (CommonGetRequest) returns (CommonMeditationResponse) {
        option (google.api.http) = {
            get: "/v1/meditations/{id}"
        };
    }
    // Update Meditation
    rpc UpdateMeditation (CommonMeditationRequest) returns (CommonMeditationResponse) {
        option (google.api.http) = {
            put: "/v1/meditations/{id}"
            body: "*"
        };
    }
    // Update Meditations
    rpc UpdateMeditations (CommonMeditationsRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            put: "/v1/meditations"
            body: "*"
        };
    }
    // Delete Meditation
    rpc DeleteMeditation (CommonDeleteRequest) returns (CommonMeditationResponse) {
        option (google.api.http) = {
            delete: "/v1/meditations/{id}"
        };
    }
    // Delete Meditations
    rpc DeleteMeditations (CommonDeletesRequest) returns (CommonIdsResponse) {
        option (google.api.http) = {
            delete: "/v1/meditations"
        };
    }
    // Get Meditations
    rpc GetMeditations (CommonGetsRequest) returns (CommonMeditationsResponse) {
        option (google.api.http) = {
            get: "/v1/meditations"
        };
    }
    // Get Password Reset
    rpc GetPasswordReset (GetPasswordResetRequest) returns (GetPasswordResetResponse) {
        option (google.api.http) = {
            get: "/v1/users/{id}/passwordreset"
        };
    }
    // Update Password
    rpc UpdatePassword (UpdatePasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/users/passwordreset/{token}"
            body: "*"
        };
    }
    // Login
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }
    // Logout
    rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/logout"
        };
    }
    // Refresh
    rpc Refresh (google.protobuf.Empty) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/v1/refresh"
            body: "*"
        };
    }
    // Client Update Patient
    rpc ClientUpdatePatient (ClientUpdatePatientRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/client/patients/{id}"
            body: "*"
        };
    }
    // Client Update Patient V2
    rpc ClientUpdatePatientV2 (ClientUpdatePatientRequest) returns (ClientUpdatePatientV2Response) {
        option (google.api.http) = {
            put: "/v2/client/patients/{id}"
            body: "*"
        };
    }
    // Client Get Patients
    rpc ClientGetPatients (ClientGetPatientsRequest) returns (ClientGetPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/client/patients"
        };
    }
    // Client Get Patient V2
    rpc ClientGetPatientV2 (ClientGetPatientV2Request) returns (ClientGetPatientV2Response) {
        option (google.api.http) = {
            get: "/v2/client/patients"
        };
    }
    // Client Get Undeclared Patients
    rpc ClientGetUndeclaredPatients (ClientGetUndeclaredPatientsRequest) returns (ClientGetUndeclaredPatientsResponse) {
        option (google.api.http) = {
            get: "/v1/client/patients/undeclared"
        };
    }
    // Client Create Declaration
    rpc ClientCreateDeclaration (ClientCreateDeclarationRequest) returns (ClientCreateDeclarationResponse) {
        option (google.api.http) = {
            post: "/v1/client/declarations"
            body: "*"
        };
    }
    // Client Get Feeds
    rpc ClientGetFeeds(ClientGetFeedsRequest) returns (CommonFeedsResponse) {
        option (google.api.http) = {
            get: "/v1/client/feeds/{id}"
        };
    }
    // Client Get Games
    rpc ClientGetGames(ClientGetGamesRequest) returns (CommonGamesResponse) {
        option (google.api.http) = {
            get: "/v1/client/games/{id}"
        };
    }
    // Client Get Meditations
    rpc ClientGetMeditations(ClientGetMeditationsRequest) returns (CommonMeditationsResponse) {
        option (google.api.http) = {
            get: "/v1/client/meditations/{id}"
        };
    }
    // Client Set Visibility
    rpc ClientSetVisibility (ClientSetVisibilityRequest) returns (ClientSetVisibilityResponse) {
        option (google.api.http) = {
            put: "/v1/client/users/visibility"
            body: "*"
        };
    }
    // Client Verify Patient Complete
    rpc ClientVerifyPatientComplete (ClientVerifyPatientCompleteRequest) returns (ClientVerifyPatientCompleteResponse) {
        option (google.api.http) = {
            post: "/v1/client/patients/complete"
            body: "*"
        };
    }
}

// common gets request payload
message CommonGetsRequest {
    // item to sort
    string item = 1;
    // item to order
    string order = 2;
    // pagination from
    int64 from = 3;
    // pagination to
    int64 to = 4;
    // item to filter
    string filterItem = 5;
    // value to filter
    string filterValue = 6;
    // patient ids
    repeated string ids = 7;
}

// common get request payload
message CommonGetRequest {
    // patient IC / passport
    string id = 1;
}

// common delete request payload
message CommonDeleteRequest {
    // id
    string id = 1;
}

// common batch delete request payload
message CommonDeletesRequest {
    // ids
    repeated string ids = 1;
}

// common Ids response
message CommonIdsResponse {
    // ids
    repeated string data = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

// get password reset request payload
message GetPasswordResetRequest {
    // user id
    string id = 1;
}

// get password reset request payload
message UpdatePasswordRequest {
    // token
    string token = 1;
    // password
    string password = 2;
}

message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
    string displayName = 3;
    string role = 4;
    string id = 5;
}

message RefreshResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

// get password reset response payload
message GetPasswordResetResponse {
    // password reset message
    string message = 1;
}

// patient payload
message Patient {
    // patient IC / passport number
    string id = 1;
    // patient telegram ID
    string telegramId = 2;
    // patient name
    string name = 3;
    // patient status (1 - Symptomatic, 2 - Asymptomatic，3 - Confirmed but not Admitted, 4 - Confirmed and Admitted, 5 - Completed, 6 - Recovered, 7 - Quit, 8 - Passed Away)
    int64 status = 4;
    // patient phone number
    string phoneNumber = 5;
    // patient email
    string email = 6;
    // patient isolation address
    string isolationAddress = 7;
    // doctors' remarks on patient
    string remarks = 8;
    // patient consent signing time in milliseconds
    int64 consent = 9;
    // patient privacy policy signing time in milliseconds
    int64 privacyPolicy = 10;
    // patient home address
    string homeAddress = 11;
    int64 lastDassTime = 12;
    int64 lastIesrTime = 13;
    int64 lastDassResult = 14;
    int64 lastIesrResult = 15;
    int64 registrationStatus = 16;
    string userId = 17;
    int64 daySinceMonitoring = 18;
    string password = 19;
    bool hasCompleted = 20;
    int64 mentalStatus = 21;
    int64 type = 22;
    string swabDate = 23;
    int64 swabResult = 24;
}

// common patient request payload
message CommonPatientRequest {
    // patient IC / passport
    string id = 1;
    // patient object
    Patient data = 2;
}

// common patients request payload
message CommonPatientsRequest {
    // patient ids
    repeated string ids = 1;
    // patient payload
    Patient data = 2;
}

// common patients response payload
message CommonPatientsResponse {
    // patients payload
    repeated Patient data = 1;
    // total patients
    int64 total = 2;
}

// common patient response payload
message CommonPatientResponse {
    // patient payload
    Patient data = 1;
}

// user payload
message User {
    // user id
    string id = 1;
    // user role: superuser, chatbot, admin, nurse
    string role = 2;
    // user name
    string name = 3;
    // user phone number
    string phoneNumber = 4;
    // user email
    string email = 5;
    // user hashed password
    string password = 6;
    repeated string blockList = 7;
    bool visible = 8;
    bool disabled = 9;
    bool notFirstTimeChat = 10;
}

// common user request payload
message CommonUserRequest {
    // user id
    string id = 1;
    // user payload
    User data = 2;
}

// common users request payload
message CommonUsersRequest {
    // user ids
    repeated string ids = 1;
    // user payload
    User data = 2;
}

// common users response payload
message CommonUsersResponse {
    // users payload
    repeated User data = 1;
    // total users
    int64 total = 2;
}

// common user response payload
message CommonUserResponse {
    // user payload
    User data = 1;
}

// declaration payload
message Declaration {
    string id = 1;
    // patient IC / passport
    string patientId = 2;
    repeated Question result = 5;
    string category = 6;
    int64 score = 7;
    int64 status = 8;
    // report submission time in milliseconds
    int64 submittedAt = 9;
    // doctor remarks on the report
    string doctorRemarks = 10;
}

// common declaration request payload
message CommonDeclarationRequest {
    // declaration id (not used )
    string id = 1;
    // declaration payload
    Declaration data = 2;
}

// common declarations request payload
message CommonDeclarationsRequest {
    // declaration ids
    repeated string ids = 1;
    // declaration payload
    Declaration data = 2;
}

// common declaration response payload
message CommonDeclarationResponse {
    // declaration payload
    Declaration data = 1;
}

// get declarations response payload
message CommonDeclarationsResponse {
    // declarations payload
    repeated Declaration data = 1;
    // total declarations
    int64 total = 2;
}

// client update patient request payload
message ClientUpdatePatientRequest {
    // patient IC / passport
    string id = 1;
    // patient telegram ID
    string telegramId = 2;
    // patient consent signing time in milliseconds
    int64 consent = 3;
    // patient privacy policy signing time in milliseconds
    int64 privacyPolicy = 4;
}

// client get patients request payload
message ClientGetPatientsRequest {
    // patient telegram ID
    string telegramId = 1;
    // patient phone number
    string phoneNumber = 2;
    // patient id
    string id = 3;
    // day of monitoring
    int64 day = 4;
}

// client get patients request payload
message ClientGetPatientV2Request {
    // patient telegram ID
    string telegramId = 1;
    // patient phone number
    string phoneNumber = 2;
    // patient id
    string id = 3;
}

// client get undeclared patients request payload
message ClientGetUndeclaredPatientsRequest {
    // undeclared from given millisecond time (deprecated, now depending on 12 am)
    int64 from = 1;
    // undeclared to given millisecond time (deprecated)
    int64 to = 2;
}

// client create declaration request payload
message ClientCreateDeclarationRequest {
    // patient IC / passport
    string patientId = 1;
    Declaration data = 2;
}

// client get patients response payload
message ClientGetPatientsResponse {
    // patients payload
    repeated Patient patients = 1;
}

// client get patient V2 response payload
message ClientGetPatientV2Response {
    Patient data = 1;
}

// client update patient V2 response payload
message ClientUpdatePatientV2Response {
    int64 registrationStatus = 1;
}

// client get undeclared patients response payload
message ClientGetUndeclaredPatientsResponse {
    // patients payload
    repeated Patient patients = 1;
}

// client create declaration response payload
message ClientCreateDeclarationResponse {
    // client report result
    int64 hasSymptom = 1;
}

// report payload
message Report {
    // date of report
    string date = 1;
    map<string, int64> counts = 2;
}

// get report request payload
message GetReportRequest {
    // date of report
    string date = 1;
}

// get reports request payload
message GetReportsRequest {
    // from date (inclusive, in yyyyMMdd format)
    string from = 1;
    // to date (inclusive, in yyyyMMdd format)
    string to = 2;
}

// common report response payload
message CommonReportResponse {
    // report payload
    Report data = 1;
}

// common reports response payload
message CommonReportsResponse {
    // reports payload
    repeated Report data = 1;
}

message Question {
    string id = 1;
    string category = 2;
    string type = 3;
    string content = 4;
    int64 score = 5;
}

// common question request payload
message CommonQuestionRequest {
    // question id (not used )
    string id = 1;
    // question payload
    Question data = 2;
}

// common questions request payload
message CommonQuestionsRequest {
    // question ids
    repeated string ids = 1;
    // question payload
    Question data = 2;
}

// common question response payload
message CommonQuestionResponse {
    // question payload
    Question data = 1;
}

// get questions response payload
message CommonQuestionsResponse {
    // questions payload
    repeated Question data = 1;
    // total questions
    int64 total = 2;
}

message ChatMessage {
    string id = 1;
    string roomId = 2;
    string senderId = 3;
    string content = 4;
    int64 timestamp = 5;
}

message CommonChatMessageRequest {
    string id = 1;
    ChatMessage data = 2;
}

message CommonChatMessagesRequest {
    repeated string ids = 1;
    ChatMessage data = 2;
}

message CommonChatMessageResponse {
    ChatMessage data = 1;
}

message CommonChatMessagesResponse {
    repeated ChatMessage data = 1;
    int64 total = 2;
}

message ChatRoom {
    string id = 1;
    repeated string participantIds = 2;
    bool blocked = 3;
    int64 timestamp = 4;
}

message CommonChatRoomRequest {
    string id = 1;
    ChatRoom data = 2;
}

message CommonChatRoomsRequest {
    repeated string ids = 1;
    ChatRoom data = 2;
}

message CommonChatRoomResponse {
    ChatRoom data = 1;
}

message CommonChatRoomsResponse {
    repeated ChatRoom data = 1;
    int64 total = 2;
}

message Consultant {
    string id = 1;
    string userId = 2;
    string name = 3;
    string phoneNumber = 4;
    string email = 5;
    repeated string takenSlots = 6;
    string password = 7;
}

message CommonConsultantRequest {
    string id = 1;
    Consultant data = 2;
}

message CommonConsultantsRequest {
    repeated string ids = 1;
    Consultant data = 2;
}

message CommonConsultantResponse {
    Consultant data = 1;
}

message CommonConsultantsResponse {
    repeated Consultant data = 1;
    int64 total = 2;
}

message Meeting {
    string id = 1;
    string patientId = 2;
    string consultantId = 3;
    string time = 4;
    int64 status = 5;
}

message CommonMeetingRequest {
    string id = 1;
    Meeting data = 2;
}

message CommonMeetingsRequest {
    repeated string ids = 1;
    Meeting data = 2;
}

message CommonMeetingResponse {
    Meeting data = 1;
}

message CommonMeetingsResponse {
    repeated Meeting data = 1;
    int64 total = 2;
}

message Feed {
    string id = 1;
    string title = 2;
    string description = 3;
    string link = 4;
    string imgPath = 5;
    int64 type = 6;
}

message CommonFeedRequest {
    string id = 1;
    Feed data = 2;
}

message CommonFeedsRequest {
    repeated string ids = 1;
    Feed data = 2;
}

message CommonFeedResponse {
    Feed data = 1;
}

message CommonFeedsResponse {
    repeated Feed data = 1;
    int64 total = 2;
}

message Game {
    string id = 1;
    string linkAdr = 2;
    string linkIos = 3;
    string imgPathAdr = 4;
    string imgPathIos = 5;
}

message CommonGameRequest {
    string id = 1;
    Game data = 2;
}

message CommonGamesRequest {
    repeated string ids = 1;
    Game data = 2;
}

message CommonGameResponse {
    Game data = 1;
}

message CommonGamesResponse {
    repeated Game data = 1;
    int64 total = 2;
}

message Meditation {
    string id = 1;
    string link = 2;
}

message CommonMeditationRequest {
    string id = 1;
    Meditation data = 2;
}

message CommonMeditationsRequest {
    repeated string ids = 1;
    Meditation data = 2;
}

message CommonMeditationResponse {
    Meditation data = 1;
}

message CommonMeditationsResponse {
    repeated Meditation data = 1;
    int64 total = 2;
}

message ClientGetFeedsRequest {
    string id = 1;
}

message ClientGetGamesRequest {
    string id = 1;
}

message ClientGetMeditationsRequest {
    string id = 1;
}

message ClientSetVisibilityRequest {
    string id = 1;
    bool visible = 2;
}

message ClientSetVisibilityResponse {
    bool ok = 1;
}

message ClientVerifyPatientCompleteRequest {
    string id = 1;
    bool force = 2;
}

message ClientVerifyPatientCompleteResponse {
    bool hasCompleted = 1;
}